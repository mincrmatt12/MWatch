; first: the data out


.define IRQ_HSYNC 0
.define IRQ_VSYNC 1
.define public IRQ_DONE  2   ; routed to CPU: set high on frame done; clear to _start next frame_ (so clear the inte flag then exit handler, then on next frame actually clear status)

.program ls012_dataout

;; DATAOUT: run at 24mhz, 10 cycles = 416 ns (in spec), hold time == 5 cyc, perfectly to spec    || clkdiv 4   from 96
;; HCLK:    run at 12mhz, 5 cycles = 416 ns;  1 cyc = 83ns                                       || clkdiv 8   from 96
;; VCLK:    run at 274khz                                                                        || clkdiv 350 from 96 

.wrap_target
	; reset counter
	mov x, y
pixloop:
	; sync with ls012_hclk  ( and wait for frame start )
	wait 1 irq IRQ_HSYNC         [5] ;; ------ DATAOUT ---------- HCLK -------  0 cycles (sync'd here) TODO: may need some tweaking   (loop, 10/5 cyc)
	; BEGIN OUTPUTTING               ;;                       
	                                 ;;                        1cyc (during wait postdelay) <--- clock changed (previous value asserted)
									 ;;                        2cyc (during wait postdelay)    |
	out pins, 6                      ;; 7  cyc                 3.5cyc    (actual output)  <----|  new data asserted (halfway through)
	out null, 10                 [1] ;; 8  cyc                 4cyc
	; loop                                                                            
	jmp x--, pixloop                 ;; 9 cyc                      
	; AFTER LOOP: reset pins
	; mov pins, null
.wrap ; jump back for next line
	
.program ls012_hclk

.define thwGEN 31   ; 31 * 4 = 124 clock cycles = 10.3 us (in spec)
.define thhGCK 12   ; 10 * 4 = 40  clock cycles = ~4us

.side_set 2 opt ; sideset: BSP,GEN
; two bits for delays: should be just barely enough

.wrap_target
    ; entry point: setup BSP
    mov x, y               side 0b10   [3]      ;; setup GSP (assume GCK is already low -- it should be, and the init code sets it there as well)
	mov pins, ~null                    [3]      ;; pulse clock (-1 delay for irq)
pixloop:   
	irq wait IRQ_HSYNC                          ;; SYNC WITH DATAOUT (both should continue execution at same time afaict)
	mov pins, ~pins                                        
	jmp x--, pixloop       side 0b00            ;; RESET GSP (do it now to look slightly more like the datasheet since we can)
	; AFTER LINE done; do GEN pulse (GCK should now have just been set to zero -- delay)
	set x, (thwGEN-3)                  [2]      ;; full clock cycle  (-1 from jump, -1 from counter)  ---- setup thwGEN
	mov pins, null         side 0b01   [3]
gendelay:
	jmp x--, gendelay                  [3]      ;; keep gen pulsed
	set x, (thhGCK-1)      side 0b00   [1]      ;; +0.5
gckdelay:
	jmp x--, gckdelay                  [3]
public entry_point:
	wait 1 irq IRQ_VSYNC                  
	wait 1 irq IRQ_VSYNC                  
.wrap

.program ls012_vclk

.define thsINTB_GSP 3
.define thwGCK 16 ; 16 total cycles: just under the proper time but whatever
.side_set 1 ; GSP only

.wrap_target
   ; wait for notification from cpu to start -- CPU MUST ASSERT INTB at this point by writing the correct instruction here
   irq wait IRQ_DONE                  side 0
   set pins, 0b01     [thsINTB_GSP]   side 0
   ; turn on start pulse + setup counter
   mov x, y           [thsINTB_GSP]   side 1
   ; hold one clock cycle
   set pins, 0b11     [thwGCK-1]      side 1
lineloop:
   ; sync with horizontal
   irq wait IRQ_VSYNC                 side 0   ; reset GSP from first loop
   ; flip gck
   mov pins, ~pins                    side 0   
   irq wait IRQ_VSYNC                 side 0   ; notify GSP done (triggers actual pulse)
   ; loop
   jmp x--, lineloop                  side 0
   ; DONE SCREEN, one final clock cycle
   mov pins, ~null    [thwGCK-1]      side 0
   mov pins,  null    [thwGCK-1]      side 0
   mov pins, ~null    [thwGCK-1]      side 0
   mov pins,  null    [3]             side 0
   set pins, 0b00                     side 0
   ; CPU gets notification from irq; it should clear out the clk / whatever with some expediency 
.wrap
